(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{438:function(e,t,n){"use strict";n.r(t);var r=n(45),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"【react进阶系列】手写redux-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#【react进阶系列】手写redux-api"}},[e._v("#")]),e._v(" "),n("a",{attrs:{href:"https://segmentfault.com/a/1190000016726553",target:"_blank",rel:"noopener noreferrer"}},[e._v("【React进阶系列】手写redux api"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("简介： 手写实现redux基础api")]),e._v(" "),n("h2",{attrs:{id:"createstore-和store相关方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#createstore-和store相关方法"}},[e._v("#")]),e._v(" createStore( )和store相关方法")]),e._v(" "),n("p",[n("strong",[e._v("api回顾：")])]),e._v(" "),n("p",[n("strong",[e._v("createStore(reducer, [preloadedState], enhancer)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("创建一个 Redux store 来以存放应用中所有的 state\nreducer (Function): 接收两个参数，当前的 state 树/要处理的 action，返回新的 state 树\npreloadedState: 初始时的 state\nenhancer (Function): store creator 的高阶函数，返回一个新的强化过的 store creator\n")])])]),n("p",[n("strong",[e._v("Store 方法")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("getState() 返回应用当前的 state 树\ndispatch(action) 分发 action。这是触发 state 变化的惟一途径\nsubscribe(listener) 添加一个变化监听器。每当 dispatch action 的时候就会执行，state 树中的一部分可能已经变化\nreplaceReducer(nextReducer) 替换 store 当前用来计算 state 的 reducer（高级不常用，不作实现）实现 Redux 热加载机制会用到\n")])])]),n("hr"),e._v(" "),n("p",[e._v("源码实现：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("./self-redux.js\n\nexport function createStore(reducer, enhancer) {\n  if(enhancer) {\n     return enhancer(createStore)(reducer)\n  }\n  let currentState = {}\n  let currentListeners = []\n  function getState() {\n    return currentState\n  }\n  function subscribe(listeners) {\n    currentListeners.push(listener)\n  }\n  function dispatch(action) {\n    currentState = reducer(currentState, action)\n    currentListeners.forEach(v => v())\n    return action\n  }\n  dispatch({ type: '@rainie/init-store' })\n  return {\n    getState,\n    subscribe,\n    dispatch\n  }\n}\n")])])]),n("p",[e._v("demo:验证正确性")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// import { createStore } from 'redux'\n// 将redux文件替换成自己实现的redux文件\n   import { createStore } from './self-redux.js'\n\n// 这就是reducer处理函数，参数是状态和新的action\nfunction counter(state=0, action) {\n  // let state = state||0\n  switch (action.type) {\n    case '加机关枪':\n      return state + 1\n    case '减机关枪':\n      return state - 1\n    default:\n      return 10\n  }\n}\n// 新建store\nconst store = createStore(counter)\nconst init = store.getState()\nconsole.log(`一开始有机枪${init}把`)\nfunction listener(){\n  const current = store.getState()\n  console.log(`现在有机枪${current}把`)\n}\n// 订阅，每次state修改，都会执行listener\nstore.subscribe(listener)\n// 提交状态变更的申请\nstore.dispatch({ type: '加机关枪' })\n")])])]),n("h2",{attrs:{id:"combinereducers-reducers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#combinereducers-reducers"}},[e._v("#")]),e._v(" combineReducers(reducers)")]),e._v(" "),n("p",[n("strong",[e._v("api简介")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("把一个由多个不同 reducer 函数作为 value 的 object，合并成一个最终的 reducer 函数\n实现 Redux 热加载机制会用到\nimport { combineReducers } from 'redux'\nimport todos from './todos'\nimport counter from './counter'\n\nexport default combineReducers({\n  todos,\n  counter\n})\n")])])]),n("p",[n("strong",[e._v("实现：")])]),e._v(" "),n("p",[e._v("实质就是返回一个大的function 接受state，action，然后根据key用不同的reducer\n注：combinedReducer的key跟state的key一样")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const reducer = combineReducers({\n  a: doSomethingWithA,\n  b: processB,\n  c: c\n})\nfunction reducer(state = {}, action) {\n  return {\n    a: doSomethingWithA(state.a, action),\n    b: processB(state.b, action),\n    c: c(state.c, action)\n  }\n}\nfunction combindReducer(reducers) {\n    // 第一个只是先过滤一遍 把非function的reducer过滤掉\n  const reducerKeys = Object.keys(reducers)\n  const finalReducers = {}\n  reducerKeys.forEach((key) => {\n      if(typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key]\n      } \n  })\n  const finalReducersKeys = Object.keys(finalReducers)\n    // 第二步比较重要 就是将所有reducer合在一起\n    // 根据key调用每个reducer，将他们的值合并在一起\n    let hasChange = false;\n    const nextState = {};\n    return function combind(state={}, action) {\n        finalReducersKeys.forEach((key) => {\n            const previousValue = state[key];\n            const nextValue = reducers[key](previousValue, action);\n            nextState[key] = nextValue;\n            hasChange = hasChange || previousValue !== nextValue\n        })\n        return hasChange ? nextState : state;\n    }\n}\n")])])]),n("hr"),e._v(" "),n("p",[n("strong",[e._v("applyMiddleware(...middleware)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("使用包含自定义功能的 middleware 来扩展 Redux 是\n...middleware (arguments): 遵循 Redux middleware API 的函数。\n每个 middleware 接受 Store 的 dispatch 和 getState 函数作为命名参数，并返回一个函数。\n该函数会被传入 被称为 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next(action)，或者在其他需要的时刻调用，甚至根本不去调用它。\n调用链中最后一个 middleware 会接受真实的 store 的 dispatch 方法作为 next 参数，并借此结束调用链。\n所以，middleware 的函数签名是 ({ getState, dispatch }) => next => action\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport * as reducers from './reducers'\n\nlet reducer = combineReducers(reducers)\n// applyMiddleware 为 createStore 注入了 middleware:\nlet store = createStore(reducer, applyMiddleware(thunk))\n")])])]),n("h2",{attrs:{id:"中间件机制applymiddleware的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#中间件机制applymiddleware的实现"}},[e._v("#")]),e._v(" 中间件机制applyMiddleware的实现")]),e._v(" "),n("p",[e._v("中间件机制图")]),e._v(" "),n("p",[n("img",{attrs:{src:"Redux-api.assets/bVbit84",alt:"clipboard.png"}})]),e._v(" "),n("p",[e._v("实现步骤\n1.扩展createStore,使其接受第二个参数（中间件其实就是对createStore方法的一次扩展）\n2.实现applyMiddleware,对store的disptach进行处理\n3.实现一个中间件")]),e._v(" "),n("p",[e._v("正常调用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import React from 'react'\nimport ReactDOM from 'react-dom'\n// import { createStore, applyMiddleware} from 'redux'\nimport { createStore, applyMiddleware} from './self-redux'\n// import thunk from 'redux-thunk'\nimport thunk from './self-redux-thunk'\nimport { counter } from './index.redux'\nimport { Provider } from './self-react-redux';\nimport App from './App'\n \nconst store = createStore(counter, applyMiddleware(thunk))\nReactDOM.render(\n  (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root')) \n// 便于理解：函数柯利化例子\nfunction add(x) {\n  return function(y) {\n    return x+y\n  }\n}\nadd(1)(2) //3\n")])])]),n("p",[e._v("applymiddleware")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// ehancer(createStore)(reducer)\n// createStore(counter, applyMiddleware(thunk))\n// applyMiddleware(thunk)(createStore)(reducer)\n// 写法函数柯利化\nexport function applyMiddleware(middleware) {\n  return function (createStore) {\n    return function(...args) {\n      // ...\n    }\n  }\n}\n\n\n// 只处理一个 middleware 时\nexport function applyMiddleware(middleware) {\n   return createStore => (...args) => {\n     const store = createStore(...args)\n     let dispatch = store.dispatch\n\n     const midApi = {\n       getState: store.getState,\n       dispatch: (...args) => dispatch(...args)\n     }\n    // 经过中间件处理，返回新的dispatch覆盖旧的\n     dispatch = middleware(midApi)(store.dispatch)\n    // 正常中间件调用：middleware(midApi)(store.dispatch)(action)\n\n    return {\n      ...store,\n      dispatch\n    }\n   }\n }\n\n// 处理多个middleware时\n\n//  多个 compose\n export function applyMiddleware(...middlewares) {\n   return createStore => (...args) => {\n     const store = createStore(...args)\n     let dispatch = store.dispatch\n\n     const midApi = {\n       getState: store.getState,\n       dispatch: (...args) => dispatch(...args)\n     }\n\n    const middlewareChain = middlewares.map(middleware => middleware(midApi))\n    dispatch => compose(...middlewareChain(store.dispatch))\n    //  dispatch = middleware(midApi)(store.dispatch)\n    // middleware(midApi)(store.dispatch)(action)\n\n    return {\n      ...store,\n      dispatch\n    }\n   }\n }\n")])])]),n("p",[e._v("手写redux-thunk异步中间件实现")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// middleware(midApi)(store.dispatch)(action)\nconst thunk = ({ dispatch, getState }) => next => action => {\n  // next就是store.dispatch函数\n  // 如果是函数，执行以下，参数dispatch和getState\n  if (typeof action == 'function') {\n    return action(dispatch, getState)\n  }\n  // 默认 什么都不干\n  return next(action)\n}\nexport default thunk\n\n处理异步action\nexport function addGunAsync() {\n  // thunk插件作用，这里可以返回函数\n  return dispatch => {\n    setTimeout(() => {\n      // 异步结束后，手动执行dispatch\n      dispatch(addGun())\n    }, 2000)\n  }\n}\n")])])]),n("p",[e._v("趁热打铁，再实现一个中间件: dispatch接受一个数组，一次处理多个action")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export arrayThunk = ({ dispatch, getState }) => next => action => {\n  if(Array.isArray(action)) {\n    return action.forEach(v => dispatch(v))\n  }\n\n  return next(action)\n}\n\n这类action会被处理\nexport function addTimes() {\n  return [{ type: ADD_GUN },{ type: ADD_GUN },{ type: ADD_GUN }]\n}\n")])])]),n("h2",{attrs:{id:"bindactioncreators的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bindactioncreators的实现"}},[e._v("#")]),e._v(" bindActionCreators的实现")]),e._v(" "),n("p",[e._v("在react-redux connect mapDispatchToProps中使用到了该方法，可以去看那篇blog,有详解~")]),e._v(" "),n("p",[n("strong",[e._v("api: bindActionCreators(actionCreators, dispatch)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("把 action creators 转成拥有同名 keys 的对象，但使用 dispatch 把每个 action creator 包围起来，这样可以直接调用它们\n")])])]),n("p",[n("strong",[e._v("实现：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" function bindActionCreator(creator, dispatch) {\n   return (...args) => dispatch(creator(...args))\n }\n\n export function bindActionCreators(creators, dispatch) {\n   let bound = {}\n   Object.keys(creators).forEach( v => {\n     let creator = creators[v]\n     bound[v] = bindActionCreator(creator, dispatch)\n   })\n   return bound\n }\n//  简写\n export function bindActionCreators(creators, dispatch) {\n  return Object.keys(creators).reduce((ret, item) => {\n     ret[item] =  bindActionCreator(creators[item], dispatch)\n     return ret\n   }, {})\n }\n")])])]),n("h2",{attrs:{id:"compose的实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#compose的实现"}},[e._v("#")]),e._v(" compose的实现")]),e._v(" "),n("p",[n("strong",[e._v("api: compose(...functions)")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("从右到左来组合多个函数。\n当需要把多个 store 增强器 依次执行的时候，需要用到它\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport DevTools from './containers/DevTools'\nimport reducer from '../reducers'\n\nconst store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(thunk),\n    DevTools.instrument()\n  )\n)\n")])])]),n("p",[n("strong",[e._v("实现：")]),e._v("\ncompose(fn1, fn2, fn3)\nfn1(fn2(fn3))")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v(" export function compose(...funcs) {\n   if(funcs.length == 0) {\n     return arg => arg\n   }\n   if(funcs.length == 1) {\n     return funcs[0]\n   }\n   return funcs.reduce((ret,item) => (...args) => ret(item(...args)))\n }\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);