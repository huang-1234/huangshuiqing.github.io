(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{441:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git常用命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[t._v("#")]),t._v(" git常用命令")]),t._v(" "),s("h2",{attrs:{id:"下载安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下载安装"}},[t._v("#")]),t._v(" 下载安装")]),t._v(" "),s("p",[t._v('从git官网下载安装包，安装完毕后就可以使用命令行的 git 工具，在开始菜单里找到"Git"->"Git Bash"，会弹出 Git 命令窗口，你可以在该窗口进行 Git 相关命令行的操作。')]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("具体可参考https://www.runoob.com/git/git-install-setup.html\n")])])]),s("h2",{attrs:{id:"全局配置环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局配置环境"}},[t._v("#")]),t._v(" 全局配置环境")]),t._v(" "),s("p",[t._v("配置个人用户名和电子邮箱")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config –globle user.name “runoob”\ngit config –globle user.email text@runoob.com\n")])])]),s("p",[t._v("配置完毕后，可以通过$ git config –list命令查看所有的配置信息。 也可直接查询某个环境变量的信息。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git config user.name\ngit config user.email\n")])])]),s("h2",{attrs:{id:"查看工作区状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看工作区状态"}},[t._v("#")]),t._v(" 查看工作区状态")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git status\n")])])]),s("ul",[s("li",[t._v("状态一：修改了没有添加到缓存区（红色），此时可以通过git diff 查看修改了的内容，“-”号是修改前，“+”号是修改后，第一个加号后修改的前一行。第二个加号是修改的内容。")]),t._v(" "),s("li",[t._v("状态二：修改了添加到缓存区（绿色）")]),t._v(" "),s("li",[t._v("状态三：On branch master nothing to commit, work tree clean 表明无修改内容")])]),t._v(" "),s("h2",{attrs:{id:"添加文件到git仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加文件到git仓库"}},[t._v("#")]),t._v(" 添加文件到git仓库")]),t._v(" "),s("p",[t._v("分两步： 把修改的修改添加到版本库里的暂存区，可以单独添加某个文件，可多次使用")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git add <file>\n")])])]),s("p",[t._v("把暂存区的所有内容提交到当前分支，提交的说明一定要写（字符串加双引号）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git commit -m <message>\n")])])]),s("p",[t._v("将当前分支与远程仓库关联")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[t._v("git remote add origin \n")])])]),s("p",[t._v("删除与远程仓库的关联就比较简单了，直接输入以下命令：")]),t._v(" "),s("div",{staticClass:"language-git extra-class"},[s("pre",{pre:!0,attrs:{class:"language-git"}},[s("code",[s("span",{pre:!0,attrs:{class:"token command"}},[t._v("$ git remote rm **github**")]),t._v("\n")])])]),s("p",[s("strong",[t._v("注意：")]),t._v(" 以上"),s("strong",[t._v("github")]),t._v(" 是远程仓库在本地Git中的名称。就是上面的origin")]),t._v(" "),s("h2",{attrs:{id:"本地同步更新远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地同步更新远程分支"}},[t._v("#")]),t._v(" 本地同步更新远程分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git pull\n")])])]),s("p",[t._v("如果项目是多人合作的，那么就需要在拉去别人更新的代码合并到本地。Git会自动合并本地代码。")]),t._v(" "),s("h2",{attrs:{id:"把缓存中的代码推送到远程分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把缓存中的代码推送到远程分支"}},[t._v("#")]),t._v(" 把缓存中的代码推送到远程分支")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git push\n")])])]),s("h2",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("ul",[s("li",[t._v("场景一：修改了文件但是未被add")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout -- <file>\n")])])]),s("ul",[s("li",[t._v("场景二：修改了工作区内容，还添加到了暂存区时，想丢弃修改，分两步")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset HEAD <file> 就回到了场景一\ngit checkout -- <file>\n")])])]),s("ul",[s("li",[t._v("场景三：修改文件已被commit,但是没有推送到远程库，想要撤销本次提交，只能切换版本")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git reset --hard HEAD^\n")])])]),s("h2",{attrs:{id:"从远程分支拉取项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从远程分支拉取项目"}},[t._v("#")]),t._v(" 从远程分支拉取项目")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git clone SSH/HTTPS地址 -b <分支名>\n")])])]),s("h2",{attrs:{id:"分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),s("p",[t._v("当前分支作业时")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1)查看分支：git branch\n2)创建分支：git branch <name>\n3)切换分支：git checkout <name>\n4)创建+切换分支：git checkout -b <name>\n5)合并某分支到当前分支：git merge <name>\n6)删除分支git branch -d <name>\n")])])]),s("p",[t._v("临时切换分支作业时")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("1)暂存分支工作状态： git stash\n2)查看分支存储的工作状态： git stash list\n3)恢复分支工作状态： git stash apply\n4)删除分支存储的工作状态：git stash drop\n5)恢复并删除分支存储工作状态：git stash pop\n")])])]),s("p",[t._v("切换远程分支 ：当前分支branch1工作，现在需要在分支branch2上工作，则需要切换")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git fetch origin branch2(分支名)\ngit checkout branch2\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);